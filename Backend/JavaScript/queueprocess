const functions = require("firebase-functions");
const admin = require("firebase-admin");

exports.processQueue = functions
    .region("asia-southeast1")
    .database.instance("//Realtime Database Id")
    .ref("/ticketqueue/{orderKey}")
    .onWrite(async (change, context) => {
      const snapshot = change.after;
      console.log(`val of snapshot is aa${snapshot.val()}aa`)
      console.log(`haschildren${snapshot.hasChildren()}`)
      if (snapshot.hasChildren()) {
      const orderKey = context.params.orderKey;
      const orderVal = snapshot.val();
      const orderRef = snapshot.ref;
      const flagref = orderRef.child("flag");
      const c1 = orderVal.c['1'];
      const c2 = orderVal.c['2'];
      const g1 = orderVal.g['1'];
      const s1 = orderVal.s['1'];
      const s2 = orderVal.s['2'];
      const t1 = orderVal.t['1'];
      const y1 = orderVal.y['1'];
      const counterRef = admin.database().ref("counter");
      const ticketRef = admin.database().ref("tickets");
      const archiveRef = admin.database().ref("orderarchives");
      const counterc = counterRef.child("c");
      const counterg = counterRef.child("g");
      const counters = counterRef.child("s");
      const countert = counterRef.child("t");
      const countery = counterRef.child("y");
      const ticketRefC = ticketRef.child("C/main");
      const ticketRefG = ticketRef.child("G/main");
      const ticketRefS = ticketRef.child("S/main");
      const ticketRefT = ticketRef.child("T/main");
      const ticketRefY = ticketRef.child("Y/main");
      const keyRefC = ticketRef.child("keylist/c");
      const keyRefG = ticketRef.child("keylist/g");
      const keyRefS = ticketRef.child("keylist/s");
      const keyRefT = ticketRef.child("keylist/t");
      const keyRefY = ticketRef.child("keylist/y");

      function checkCounterTransaction(currentData) {
        if (currentData === null || currentData === undefined) {
          currentData = 0;
        }
        return currentData + 1;
      }

      async function checkTransaction() {
        if (c1+c2 !== 0) {
            let returnresult = null;
            const counterTransactionPromise = counterc.transaction(checkCounterTransaction)
                .then((result) => {
                    if (result.committed) {
                        return result.snapshot.val();
                    } else {
                        console.log(`C:Counter Transaction Aborted for ${orderKey}`);
                        return null;
                    }
                });
            returnresult = await counterTransactionPromise;
            const cData = {
                [returnresult]: {
                    1: c1,
                    2: c2,
                    "serveable": false,
                    "served": false
                }
            };
            const ckey = {
                [orderKey]: {
                    "keynum": returnresult
                }
            };
            console.log(`C Logger Result = ${returnresult}`);
            if (returnresult !== null) {
                keyRefC.update(ckey)
                .catch((error) => {
                    console.error(`C:Error Setting KeyLegend for ${orderKey}`)
                })
                ticketRefC.update(cData)
                  .then(() => {
                    console.log(`C:Data Updated Successfully for ${orderKey}`);
                  })
                  .catch((error) => {
                    console.error(`C:Error Setting Data for ${orderKey}`);
                  });
            }
        }
        if (g1 !== 0) {
            let returnresult = null;
            const counterTransactionPromise = counterg.transaction(checkCounterTransaction)
                .then((result) => {
                    if (result.committed) {
                        return result.snapshot.val();
                    } else {
                        console.log(`G:Counter Transaction Aborted for ${orderKey}`);
                        return null;
                    }
                });
            returnresult = await counterTransactionPromise;
            const gData = {
                [returnresult]: {
                    1: g1,
                    "serveable": false,
                    "served": false
                }
            };
            const gkey = {
                [orderKey]: {
                    "keynum": returnresult
                }
            };
            console.log(`G Logger Result = ${returnresult}`);
            if (returnresult !== null) {
                keyRefG.update(gkey)
                .catch((error) => {
                    console.error(`G:Error Setting KeyLegend for ${orderKey}`)
                })
                ticketRefG.update(gData)
                  .then(() => {
                    console.log(`G:Data Updated Successfully for ${orderKey}`);
                  })
                  .catch((error) => {
                    console.error(`G:Error Setting Data for ${orderKey}`);
                  });
            }
        }
        if (s1+s2 !== 0) {
            let returnresult = null;
            const counterTransactionPromise = counters.transaction(checkCounterTransaction)
                .then((result) => {
                    if (result.committed) {
                        return result.snapshot.val();
                    } else {
                        console.log(`S:Counter Transaction Aborted for ${orderKey}`);
                        return null;
                    }
                });
            returnresult = await counterTransactionPromise;
            const sData = {
                [returnresult]: {
                    1: s1,
                    2: s2,
                    "serveable": false,
                    "served": false
                }
            };
            const skey = {
                [orderKey]: {
                    "keynum": returnresult
                }
            };
            console.log(`S Logger Result = ${returnresult}`);
            if (returnresult !== null) {
                keyRefS.update(skey)
                .catch((error) => {
                    console.error(`S:Error Setting KeyLegend for ${orderKey}`)
                })
                ticketRefS.update(sData)
                  .then(() => {
                    console.log(`S:Data Updated Successfully for ${orderKey}`);
                  })
                  .catch((error) => {
                    console.error(`S:Error Setting Data for ${orderKey}`);
                  });
            }
        }
        if (t1 !== 0) {
            let returnresult = null;
            const counterTransactionPromise = countert.transaction(checkCounterTransaction)
                .then((result) => {
                    if (result.committed) {
                        return result.snapshot.val();
                    } else {
                        console.log(`T:Counter Transaction Aborted for ${orderKey}`);
                        return null;
                    }
                });
            returnresult = await counterTransactionPromise;
            const tData = {
                [returnresult]: {
                    1: t1,
                    "serveable": false,
                    "served": false
                }
            };
            const tkey = {
                [orderKey]: {
                    "keynum": returnresult
                }
            };
            console.log(`T Logger Result = ${returnresult}`);
            if (returnresult !== null) {
                keyRefT.update(tkey)
                .catch((error) => {
                    console.error(`T:Error Setting KeyLegend for ${orderKey}`)
                })
                ticketRefT.update(tData)
                  .then(() => {
                    console.log(`T:Data Updated Successfully for ${orderKey}`);
                  })
                  .catch((error) => {
                    console.error(`T:Error Setting Data for ${orderKey}`);
                  });
            }
        }
        if (y1 !== 0) {
            let returnresult = null;
            const counterTransactionPromise = countery.transaction(checkCounterTransaction)
                .then((result) => {
                    if (result.committed) {
                        return result.snapshot.val();
                    } else {
                        console.log(`Y:Counter Transaction Aborted for ${orderKey}`);
                        return null;
                    }
                });
            returnresult = await counterTransactionPromise;
            const yData = {
                [returnresult]: {
                    1: y1,
                    "serveable": false,
                    "served": false
                }
            };
            const ykey = {
                [orderKey]: {
                    "keynum": returnresult
                }
            };
            console.log(`Y Logger Result = ${returnresult}`);
            if (returnresult !== null) {
                keyRefY.update(ykey)
                .catch((error) => {
                    console.error(`Y:Error Setting KeyLegend for ${orderKey}`)
                })
                ticketRefY.update(yData)
                  .then(() => {
                    console.log(`Y:Data Updated Successfully for ${orderKey}`);
                  })
                  .catch((error) => {
                    console.error(`Y:Error Setting Data for ${orderKey}`);
                  });
            }
        }
        archiveRef.push(orderVal);
        orderRef.remove();
        console.log(`Function Finished for ${orderKey}`);

      }
      function checkToggleTransaction(currentData) {
        if (currentData === null || currentData === undefined) {
            currentData = false;
        }
        if (currentData === true) {
            return;
        }
        return true;
      }
      flagref.transaction(checkToggleTransaction)
        .then((result) => {
            if (result.committed) {
                checkTransaction();
            } else {
                console.log(`Flag:Transaction Aborted for ${orderKey}`);
            }
        })
        .catch((error) => {
            console.error(`Flag:Transaction Failed for ${orderKey} due to ${error}`);
        });
      }
    });

